# USING COLOR PALETTES
# Palettes can be more attractive and more informative
# Easiest to use
help(package=colorspace)  # Lots of info on color spaces
?palette
# Web page with PDFs of colors in R
browseURL("http://research.stowers.org/mcm/efg/R/Color/Chart/")
colors()  # Gives list of color names
barplot(x, col = "aquamarine")
barplot(x, col = "orchid3")
colors()  # Gives list of color names
barplot(x, col = "steelblue1")
# "Gray" or "grey": either is acceptable
colors()  # Gives list of color names
barplot(x, col = "tan2")
barplot(x, col = colors() [602])  # Back to slategray3
barplot(x, col = colors() [625])  # Back to slategray3
col2rgb("navyblue")  # Yields (0, 0, 128)
barplot(x, col = rgb(159, 182, 205, max = 255))  # Back to slategray3
barplot(x, col = c("red", "blue"))  # Colors will cycle
barplot(x, col = c("red", "blue", "green", "yellow"))  # Colors will cycle
col2rgb("navyblue")  # Yields (0, 0, 128)
barplot(x, col = rgb(.54, .0, .0))  # darkred
barplot(x, col = rgb(159, 182, 205, max = 255))  # Back to slategray3
barplot(x, col = "#FFEBCD")  # blanchedalmond
help(package = colorspace)
palette()
barplot(x, col = c("red", "blue"))  # Colors will cycle
barplot(x, col = c("red", "blue", "green", "yellow"))  # Colors will cycle
help(package=colorspace)  # Lots of info on color spaces
barplot(x, col = 1:6)
barplot(x, col = rainbow(6))
barplot(x, col = heat.colors(6))
barplot(x, col = topo.colors(6))
barplot(x, col = cm.colors(6))
palette("default")  # Return to default
rm(list = ls())  # Clean up
# Barplot
x = c(12, 4, 21, 17, 13, 9)
barplot(x)
browseURL("http://colorbrewer2.org/")  # Uses Flash
install.packages("RColorBrewer")
help(package = "RColorBrewer")
require("RColorBrewer")
display.brewer.all()
help(package = "RColorBrewer")
display.brewer.pal(8, "Accent")
display.brewer.pal(4, "Spectral")
display.brewer.all()
display.brewer.pal(8, "RdBu")
blues <- brewer.pal(6, "Blues")
blues <- brewer.pal(6, "Blues")
barplot(x, col = blues)
barplot(x, col = brewer.pal(6, "Greens"))
barplot(x, col = brewer.pal(6, "YlOrRd"))
barplot(x, col = brewer.pal(6, "RdGy"))
barplot(x, col = brewer.pal(6, "BrBG"))
barplot(x, col = brewer.pal(6, "Dark2"))
barplot(x, col = brewer.pal(6, "Paired"))
barplot(x, col = brewer.pal(6, "Pastel2"))
barplot(x, col = brewer.pal(6, "Dark2"))
barplot(x, col = brewer.pal(6, "Set3"))
# Clean up
palette("default")  # Return to default
detach("package:RColorBrewer", unload = TRUE)
rm(list = ls())
?plot
# ONE ROW PER CASE
?chickwts
chickwts  # Look at data
data(chickwts)  # Load data into workspace
plot(chickwts$feed)  # Plot feed from chickwts
plot(chickwts$feed)  # Plot feed from chickwts
feeds <- table(chickwts$feed)
View(chickwts)
View(chickwts)
View(chickwts)
barplot(feeds)  # Identical to plot(chickwts$feed)
barplot(feeds[order(feeds, decreasing = TRUE)])
par(oma = c(1, 1, 1, 1))  # Sets outside margins: b, l, t, r
par(mar = c(4, 5, 2, 1))  # Sets plot margins
barplot(feeds[order(feeds)],
horiz  = TRUE,
las    = 1,  # las gives orientation of axis labels
col    = c("beige", "blanchedalmond", "bisque1", "bisque2", "bisque3", "bisque4"),
border = NA,  # No borders on bars
main   = "Frequencies of Different Feeds\nin chickwts Dataset",  # \n = line break
xlab   = "Number of Chicks")
barplot(feeds[order(feeds)],
horiz  = FALSE,
las    = 1,  # las gives orientation of axis labels
col    = c("beige", "blanchedalmond", "bisque1", "bisque2", "bisque3", "bisque4"),
border = NA,  # No borders on bars
main   = "Frequencies of Different Feeds\nin chickwts Dataset",  # \n = line break
xlab   = "Number of Chicks")
rm(list = ls())  # Clean up
# LOAD DATASETS PACKAGE
require("datasets")
# ONE ROW PER CASE
data(chickwts)
# Create a table with frequencies
feeds <- table(chickwts$feed)
feeds
# Modify the pie chart
pie(feeds[order(feeds, decreasing = TRUE)],
init.angle = 90,   # Starts as 12 o'clock instead of 3
clockwise = TRUE,  # Default is FALSE
col = c("seashell", "cadetblue2", "lightpink", "lightcyan", "plum1", "papayawhip"),
main = "Pie Chart of Feeds from chickwts")
pie.a <- c(22, 14, 18, 20, 14, 12)
pie.b <- c(20, 18, 16, 18, 16, 12)
pie.c <- c(12, 14, 20, 18, 14, 22)
oldpar <- par()   # Stores old graphical parameters
par(mfrow    = c(1, 3),  # Num. rows/cols
cex.main = 3)   #  Main title 3x bigger
colors <- c("grey98", "grey90", "lightskyblue", "lightgreen", "grey98", "grey90")
?colors
# Three pie charts side by side
# Is the green slice or blue slice bigger?
pie(pie.a, main = "Pie A", col = colors)
pie(pie.b, main = "Pie B", col = colors)
pie(pie.c, main = "Pie C", col = colors)
barplot(pie.a, main = "Bar A", col = colors)
barplot(pie.b, main = "Bar B", col = colors)
barplot(pie.c, main = "Bar C", col = colors)
par(oldpar)  # Restore old graphical parameters
# Note that cin, cra, csi, cxy, and din are read-only
rm(list = lm())  # Clean up
rm(list = ls())  # Clean up
require("datasets")
?lynx
data(lynx)  # Annual Canadian Lynx trappings 1821-1934
# Make a histogram using the defaults
hist(lynx)
?hist
h <- hist(lynx,  # Save histogram as object
breaks = 11,  # "Suggests" 11 bins
#           breaks = seq(0, 7000, by = 100),
#           breaks = c(0, 100, 300, 500, 3000, 3500, 7000),
freq = FALSE,
col = "thistle1", # Or use: col = colors() [626]
main = "Histogram of Annual Canadian Lynx Trappings\n1821-1934",
xlab = "Number of Lynx Trapped")
curve(dnorm(x, mean = mean(lynx), sd = sd(lynx)),
col = "thistle4",
lwd = 2,
add = TRUE)
?curve
colors()
# IF freq = FALSE, this will draw normal distribution
curve(dnorm(x, mean = mean(lynx), sd = sd(lynx)),
col = "slateblue1",
lwd = 2,
add = TRUE)
curve(dnorm(x, mean = mean(lynx), sd = sd(lynx)),
col = "thistle4",
lwd = 2,
add = TRUE)
rm(list = ls())  # Clean up
hist(lynx)
h <- hist(lynx,  # Save histogram as object
breaks = 11,  # "Suggests" 11 bins
#           breaks = seq(0, 7000, by = 100),
#           breaks = c(0, 100, 300, 500, 3000, 3500, 7000),
freq = FALSE,
col = "thistle1", # Or use: col = colors() [626]
main = "Histogram of Annual Canadian Lynx Trappings\n1821-1934",
xlab = "Number of Lynx Trapped")
# Modify histogram
h <- hist(lynx,  # Save histogram as object
breaks = 102,  # "Suggests" 11 bins
#           breaks = seq(0, 7000, by = 100),
#           breaks = c(0, 100, 300, 500, 3000, 3500, 7000),
freq = FALSE,
col = "thistle1", # Or use: col = colors() [626]
main = "Histogram of Annual Canadian Lynx Trappings\n1821-1934",
xlab = "Number of Lynx Trapped")
h <- hist(lynx,  # Save histogram as object
breaks = 11,  # "Suggests" 11 bins
#           breaks = seq(0, 7000, by = 100),
#           breaks = c(0, 100, 300, 500, 3000, 3500, 7000),
freq = FALSE,
col = "thistle1", # Or use: col = colors() [626]
main = "Histogram of Annual Canadian Lynx Trappings\n1821-1934",
xlab = "Number of Lynx Trapped")
h <- hist(lynx,  # Save histogram as object
breaks = 11,  # "Suggests" 11 bins
#           breaks = seq(0, 7000, by = 100),
#           breaks = c(0, 100, 300, 500, 3000, 3500, 7000),
freq = FALSE,
col = "thistle1", # Or use: col = colors() [626]
main = "Histogram of Annual Canadian Lynx Trappings\n1821-1934",
xlab = "Number of Lynx Trapped")
